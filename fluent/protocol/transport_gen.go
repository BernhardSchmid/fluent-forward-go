package protocol

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AckMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ack":
			z.Ack, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Ack")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AckMessage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "ack"
	err = en.Append(0x81, 0xa3, 0x61, 0x63, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.Ack)
	if err != nil {
		err = msgp.WrapError(err, "Ack")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AckMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "ack"
	o = append(o, 0x81, 0xa3, 0x61, 0x63, 0x6b)
	o = msgp.AppendString(o, z.Ack)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AckMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ack":
			z.Ack, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ack")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AckMessage) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Ack)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Dummy) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Dummy) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 0
	err = en.Append(0x80)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Dummy) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 0
	o = append(o, 0x80)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Dummy) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Dummy) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Entry) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Timestamp, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	z.Record, err = dc.ReadIntf()
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Entry) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	err = en.WriteIntf(z.Record)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Entry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt64(o, z.Timestamp)
	o, err = msgp.AppendIntf(o, z.Record)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Entry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Timestamp, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	z.Record, bts, err = msgp.ReadIntfBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Entry) Msgsize() (s int) {
	s = 1 + msgp.Int64Size + msgp.GuessSize(z.Record)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EntryExt) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var field []byte
	_ = field
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "TimeV2")
		return
	}
	for zb0002 > 0 {
		zb0002--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err, "TimeV2")
			return
		}
		switch msgp.UnsafeString(field) {
		case "eventTime":
			err = dc.ReadExtension(&z.TimeV2.Timestamp)
			if err != nil {
				err = msgp.WrapError(err, "TimeV2", "Timestamp")
				return
			}
		case "Packing":
			z.TimeV2.Packing, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "TimeV2", "Packing")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err, "TimeV2")
				return
			}
		}
	}
	z.Record, err = dc.ReadIntf()
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EntryExt) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	// map header, size 2
	// write "eventTime"
	err = en.Append(0x92, 0x82, 0xa9, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.TimeV2.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "TimeV2", "Timestamp")
		return
	}
	// write "Packing"
	err = en.Append(0xa7, 0x50, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.TimeV2.Packing)
	if err != nil {
		err = msgp.WrapError(err, "TimeV2", "Packing")
		return
	}
	err = en.WriteIntf(z.Record)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EntryExt) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	// map header, size 2
	// string "eventTime"
	o = append(o, 0x92, 0x82, 0xa9, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65)
	o, err = msgp.AppendExtension(o, &z.TimeV2.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "TimeV2", "Timestamp")
		return
	}
	// string "Packing"
	o = append(o, 0xa7, 0x50, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67)
	o, err = msgp.AppendIntf(o, z.TimeV2.Packing)
	if err != nil {
		err = msgp.WrapError(err, "TimeV2", "Packing")
		return
	}
	o, err = msgp.AppendIntf(o, z.Record)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EntryExt) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var field []byte
	_ = field
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TimeV2")
		return
	}
	for zb0002 > 0 {
		zb0002--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err, "TimeV2")
			return
		}
		switch msgp.UnsafeString(field) {
		case "eventTime":
			bts, err = msgp.ReadExtensionBytes(bts, &z.TimeV2.Timestamp)
			if err != nil {
				err = msgp.WrapError(err, "TimeV2", "Timestamp")
				return
			}
		case "Packing":
			z.TimeV2.Packing, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeV2", "Packing")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeV2")
				return
			}
		}
	}
	z.Record, bts, err = msgp.ReadIntfBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Record")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EntryExt) Msgsize() (s int) {
	s = 1 + 1 + 10 + msgp.ExtensionPrefixSize + z.TimeV2.Timestamp.Len() + 8 + msgp.GuessSize(z.TimeV2.Packing) + msgp.GuessSize(z.Record)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EntryExtTimestampv2) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "eventTime":
			err = dc.ReadExtension(&z.Timestamp)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "Packing":
			z.Packing, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "Packing")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z EntryExtTimestampv2) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "eventTime"
	err = en.Append(0x82, 0xa9, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	// write "Packing"
	err = en.Append(0xa7, 0x50, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.Packing)
	if err != nil {
		err = msgp.WrapError(err, "Packing")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z EntryExtTimestampv2) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "eventTime"
	o = append(o, 0x82, 0xa9, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65)
	o, err = msgp.AppendExtension(o, &z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	// string "Packing"
	o = append(o, 0xa7, 0x50, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67)
	o, err = msgp.AppendIntf(o, z.Packing)
	if err != nil {
		err = msgp.WrapError(err, "Packing")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EntryExtTimestampv2) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "eventTime":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Timestamp)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "Packing":
			z.Packing, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Packing")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EntryExtTimestampv2) Msgsize() (s int) {
	s = 1 + 10 + msgp.ExtensionPrefixSize + z.Timestamp.Len() + 8 + msgp.GuessSize(z.Packing)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EntryList) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(EntryList, zb0002)
	}
	for zb0001 := range *z {
		var zb0003 uint32
		zb0003, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if zb0003 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0003}
			return
		}
		var field []byte
		_ = field
		var zb0004 uint32
		zb0004, err = dc.ReadMapHeader()
		if err != nil {
			err = msgp.WrapError(err, zb0001, "TimeV2")
			return
		}
		for zb0004 > 0 {
			zb0004--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				err = msgp.WrapError(err, zb0001, "TimeV2")
				return
			}
			switch msgp.UnsafeString(field) {
			case "eventTime":
				err = dc.ReadExtension(&(*z)[zb0001].TimeV2.Timestamp)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "TimeV2", "Timestamp")
					return
				}
			case "Packing":
				(*z)[zb0001].TimeV2.Packing, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, zb0001, "TimeV2", "Packing")
					return
				}
			default:
				err = dc.Skip()
				if err != nil {
					err = msgp.WrapError(err, zb0001, "TimeV2")
					return
				}
			}
		}
		(*z)[zb0001].Record, err = dc.ReadIntf()
		if err != nil {
			err = msgp.WrapError(err, zb0001, "Record")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z EntryList) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0005 := range z {
		// array header, size 2
		// map header, size 2
		// write "eventTime"
		err = en.Append(0x92, 0x82, 0xa9, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteExtension(&z[zb0005].TimeV2.Timestamp)
		if err != nil {
			err = msgp.WrapError(err, zb0005, "TimeV2", "Timestamp")
			return
		}
		// write "Packing"
		err = en.Append(0xa7, 0x50, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67)
		if err != nil {
			return
		}
		err = en.WriteIntf(z[zb0005].TimeV2.Packing)
		if err != nil {
			err = msgp.WrapError(err, zb0005, "TimeV2", "Packing")
			return
		}
		err = en.WriteIntf(z[zb0005].Record)
		if err != nil {
			err = msgp.WrapError(err, zb0005, "Record")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z EntryList) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0005 := range z {
		// array header, size 2
		// map header, size 2
		// string "eventTime"
		o = append(o, 0x92, 0x82, 0xa9, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65)
		o, err = msgp.AppendExtension(o, &z[zb0005].TimeV2.Timestamp)
		if err != nil {
			err = msgp.WrapError(err, zb0005, "TimeV2", "Timestamp")
			return
		}
		// string "Packing"
		o = append(o, 0xa7, 0x50, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67)
		o, err = msgp.AppendIntf(o, z[zb0005].TimeV2.Packing)
		if err != nil {
			err = msgp.WrapError(err, zb0005, "TimeV2", "Packing")
			return
		}
		o, err = msgp.AppendIntf(o, z[zb0005].Record)
		if err != nil {
			err = msgp.WrapError(err, zb0005, "Record")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EntryList) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(EntryList, zb0002)
	}
	for zb0001 := range *z {
		var zb0003 uint32
		zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if zb0003 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0003}
			return
		}
		var field []byte
		_ = field
		var zb0004 uint32
		zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001, "TimeV2")
			return
		}
		for zb0004 > 0 {
			zb0004--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001, "TimeV2")
				return
			}
			switch msgp.UnsafeString(field) {
			case "eventTime":
				bts, err = msgp.ReadExtensionBytes(bts, &(*z)[zb0001].TimeV2.Timestamp)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "TimeV2", "Timestamp")
					return
				}
			case "Packing":
				(*z)[zb0001].TimeV2.Packing, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "TimeV2", "Packing")
					return
				}
			default:
				bts, err = msgp.Skip(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "TimeV2")
					return
				}
			}
		}
		(*z)[zb0001].Record, bts, err = msgp.ReadIntfBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001, "Record")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EntryList) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0005 := range z {
		s += 1 + 1 + 10 + msgp.ExtensionPrefixSize + z[zb0005].TimeV2.Timestamp.Len() + 8 + msgp.GuessSize(z[zb0005].TimeV2.Packing) + msgp.GuessSize(z[zb0005].Record)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EventTime) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Time":
			z.Time, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z EventTime) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Time"
	err = en.Append(0x81, 0xa4, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Time)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z EventTime) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Time"
	o = append(o, 0x81, 0xa4, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendTime(o, z.Time)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EventTime) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Time":
			z.Time, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EventTime) Msgsize() (s int) {
	s = 1 + 5 + msgp.TimeSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageOptions) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "size":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Size")
					return
				}
				z.Size = nil
			} else {
				if z.Size == nil {
					z.Size = new(int)
				}
				*z.Size, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Size")
					return
				}
			}
		case "chunk":
			z.Chunk, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Chunk")
				return
			}
		case "compressed":
			z.Compressed, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Compressed")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageOptions) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	if z.Size == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Chunk == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Compressed == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "size"
		err = en.Append(0xa4, 0x73, 0x69, 0x7a, 0x65)
		if err != nil {
			return
		}
		if z.Size == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteInt(*z.Size)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "chunk"
		err = en.Append(0xa5, 0x63, 0x68, 0x75, 0x6e, 0x6b)
		if err != nil {
			return
		}
		err = en.WriteString(z.Chunk)
		if err != nil {
			err = msgp.WrapError(err, "Chunk")
			return
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "compressed"
		err = en.Append(0xaa, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.Compressed)
		if err != nil {
			err = msgp.WrapError(err, "Compressed")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageOptions) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	if z.Size == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Chunk == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Compressed == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "size"
		o = append(o, 0xa4, 0x73, 0x69, 0x7a, 0x65)
		if z.Size == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendInt(o, *z.Size)
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "chunk"
		o = append(o, 0xa5, 0x63, 0x68, 0x75, 0x6e, 0x6b)
		o = msgp.AppendString(o, z.Chunk)
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "compressed"
		o = append(o, 0xaa, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64)
		o = msgp.AppendString(o, z.Compressed)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageOptions) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "size":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Size = nil
			} else {
				if z.Size == nil {
					z.Size = new(int)
				}
				*z.Size, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Size")
					return
				}
			}
		case "chunk":
			z.Chunk, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Chunk")
				return
			}
		case "compressed":
			z.Compressed, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Compressed")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageOptions) Msgsize() (s int) {
	s = 1 + 5
	if z.Size == nil {
		s += msgp.NilSize
	} else {
		s += msgp.IntSize
	}
	s += 6 + msgp.StringPrefixSize + len(z.Chunk) + 11 + msgp.StringPrefixSize + len(z.Compressed)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RawMessage) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 []byte
		zb0001, err = dc.ReadBytes([]byte((*z)))
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = RawMessage(zb0001)
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z RawMessage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, []byte(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RawMessage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 []byte
		zb0001, bts, err = msgp.ReadBytesBytes(bts, []byte((*z)))
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = RawMessage(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z RawMessage) Msgsize() (s int) {
	s = msgp.BytesPrefixSize + len([]byte(z))
	return
}
